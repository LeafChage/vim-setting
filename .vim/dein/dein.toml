[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # 非同期処理用のプラグイン
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'

[[plugins]] #footer
repo = 'itchyny/lightline.vim'

# github {
[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "tpope/vim-fugitive"
# }

[[plugins]]
repo="tyru/skk.vim"

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]] ## grep
repo = 'dyng/ctrlsf.vim'
hook_add = '''
nmap <silent> <C-f> :CtrlSF<Space>
imap <silent> <C-f> :CtrlSF<Space>
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
let g:unite_enable_start_insert=1
let g:unite_source_file_mru_limit = 200
nmap <Leader>e :Unite file_mru<CR><C-C>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'ujihisa/neco-look'
[[plugins]]
repo = 'roxma/nvim-yarp'
depends = ['roxma/vim-hug-neovim-rpc']

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
hook_add = '''
if has('pythonx')
let s:py = 'pythonx'
let s:pyeval = function('pyxeval')
elseif has('python3')
let s:py = 'python3'
let s:pyeval = function('py3eval')
else
let s:py = 'python'
let s:pyeval = function('pyeval')
endif
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['ujihisa/neco-look', 'Shougo/neco-syntax', 'roxma/nvim-yarp', 'roxma/vim-hug-neovim-rpc']
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

#
# } 補完
#
[[plugins]] # 構文エラーチェック
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1
let g:ale_sign_error = '!!'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 0

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_linters = {
\ 'cs': ['OmniSharp']
\}
'''

[[plugins]] # スクリプト実行 Space-r
repo = 'thinca/vim-quickrun'
hook_add = """
nnoremap :run<CR> :QuickRun<CR>
let g:syntastic_javascript_checkers = ['eslint']

let g:quickrun_config = {
\'_': {
\  'split': 'vertical',
\  'runner': 'vimproc',
\  'runner/vimproc/updatetime': 60,
\  'hook/time/enable': 1,
\  'hook/time/dest': "",
\  'outputter/buffer/split': 'vertical',
\  'outputter/buffer/close_on_empty' : 1,
\},
\'rust': {
\      'exec' : 'cargo run'
\},
\'nim': {
\ 'command': 'nim',
\ 'cmdopt': 'c -r -d:ssl --verbosity:0',
\ 'hook/sweep/files': '%S:p:r',
\ 'tempfile': '%{substitute(tempname(), ''\(\d\+\)$'', ''nim\1.nim'', '''')',
\},
\'swift': {
\ 'command': 'xcrun',
\ 'cmdopt': 'swift',
\ 'exec': 'swift build',
\},
\'elm': {
\ 'exec': "elm-make %s --output elm.js",
\},
\'purescript': {
\ 'exec': "pulp run",
\},
\'fsharp': {
\ 'command': 'dotnet run',
\ 'tempfile': '%{tempname()}.fsx',
\ 'runner': 'concurrent_process',
\ 'runner/concurrent_process/load': '#load "%S";;',
\ 'runner/concurrent_process/prompt': '> '
\},
\}
set splitright
"""

# web {

[[plugins]] # htmlのマッチしている先を教えてくれる
repo = 'valloric/matchtagalways'
on_ft = ['html', 'php']
hook_souce = '''
let g:mta_use_matchparen_group = 1
let g:mta_filetypes = { 'html' : 1, 'php' : ,1 }
'''

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = ['scss']
#}

[[plugins]] # 複数行のコメントアウト ctrl+z
repo = 'tyru/caw.vim.git'
hook_add = '''
nmap <C-z> <Plug>(caw:i:toggle)
vmap <C-z> <Plug>(caw:i:toggle)
'''

[[plugins]] # カーソル下のハイライトをトグルする space+mで検索
repo = 't9md/vim-quickhl'
hook_add = '''
map <Space>m <Plug>(quickhl-manual-this)
map <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]] # indent
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_start_level=2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
'''

[[plugins]] # テキスト整形 visualモードで ga
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]] #ファイル構造
repo = 'scrooloose/nerdtree'
hook_add = '''
let NERDTreeShowHidden=1
let g:NERDTreeDirArrows = 1
map <silent> <C-n> :NERDTreeToggle<CR>
'''

[[plugins]] #color確認
repo = 'gko/vim-coloresque'

[[plugins]] #画面サイズを編集 ctrl+e
repo = 'simeji/winresizer'

[[plugins]] # j, k移動高速化
repo = 'rhysd/accelerated-jk'
    add_hook = '''
    nmap j <Plug>(accelerated_jk_gj)
    nmap k <Plug>(accelerated_jk_gk)
    '''

# Markdown {
[[plugins]] # quote内のプログラムをシンタックスハイライトする
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = ['markdown']

[[plugins]] # 編集中のMarkdownファイルのプレビューを作成する
repo = 'kannokanno/previm'
on_ft = ['markdown']

[[plugins]] # プレビューをブラウザで開いてくれる
repo = 'tyru/open-browser.vim'
on_ft = ['markdown']
hook_add = '''
map <silent> :MD<CR> :PrevimOpen<CR>
'''

[[plugins]] # \tm でtoggle
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown']
# }

# lisp {
[[plugins]]
repo = 'l04m33/vlime'
on_ft = 'lisp'
rtp = 'vim'
hook_source = '''
let g:vlime_leader = ","
let g:vlime_cl_impl = "ros"
let g:vlime_cl_impl = "sbcl"
function! VlimeBuildServerCommandFor_ros(vlime_loader, vlime_eval) abort
return ["ros", "run",
\ "--load", a:vlime_loader,
\ "--eval", a:vlime_eval]
endfunction

let g:vlime_neovim_connector = "nc"
function! VlimeBuildConnectorCommandFor_nc(host, port, timeout)
if type(a:timeout) == type(v:null)
return ['nc', a:host, string(a:port)]
else
return ['nc', '-w', string(a:timeout / 1000.0), a:host, string(a:port)]
endif
endfunction
'''
# }


# rust {
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = ['rust']
depends = ['deoplete.nvim']
hook_source = '''
let g:deoplete#sources#rust#racer_binary=$HOME.'/.cargo/bin/racer'
let $RUST_SRC_PATH=$HOME.'/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library'
let g:deoplete#sources#rust#rust_source_path=$RUST_SRC_PATH
let g:deoplete#sources#rust#show_duplicates=1
let g:deoplete#sources#rust#disable_keymap=1
nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
nmap <buffer> K  <plug>DeopleteRustShowDocumentation
'''
# }

# C# {
[[plugins]]
repo = "OmniSharp/omnisharp-vim"
on_ft = ["cs"]
build = "xbuild server/OmniSharp.sln"
hook_add = '''
let g:OmniSharp_server_type='roslyn'
let g:OmniSharp_timeout = 5
let g:OmniSharp_selector_ui = 'unite'
'''

hook_post_source = '''
nnoremap <silent> <buffer> ms :OmniSharpGotoDefinition<CR>
nnoremap <silent> <buffer> ma :OmniSharpAddToProject<CR>
nnoremap <silent> <buffer> mb :OmniSharpBuild<CR>
nnoremap <silent> <buffer> mc :OmniSharpFindSyntaxErrors<CR>
nnoremap <silent> <buffer> mf :OmniSharpCodeFormat<CR>
nnoremap <silent> <buffer> mj :OmniSharpGotoDefinition<CR>
nnoremap <silent> <buffer> mi :OmniSharpFindImplementations<CR>
nnoremap <silent> <buffer> mrename :OmniSharpRename<CR>
nnoremap <silent> <buffer> mt :OmniSharpTypeLookup<CR>
nnoremap <silent> <buffer> mr :OmniSharpFindUsages<CR>
nnoremap <silent> <buffer> mx :OmniSharpGetCodeActions<CR>
'''

[[plugins]]
repo = "Robzz/deoplete-omnisharp"
on_source = ["deoplete.nvim", "omnisharp-vim"]
#}


# go {
[[plugins]]  # go command use as vim command :GoBuild, :GoInstall

# EXECUTE `:GoInstallBinaries` AT FIRST!

# it's take a long time to go get some go sources & build them.

repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
let g:go_bin_path = $GOPATH.'/bin'

autocmd FileType go set autowrite
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
function! s:build_go_files()
let l:file = expand('%')
if l:file =~# '^\f\+_test\.go$'
call go#test#Test(0, 1)
elseif l:file =~# '^\f\+\.go$'
call go#cmd#Build(0)
endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
let g:go_term_mode = "split"
let g:go_fmt_command = "goimports"
let g:go_addtags_transform = "camelcase"
let g:go_metalinter_autosave = 1
let g:go_auto_type_info = 1
autocmd FileType go set updatetime=100
autocmd FileType go nmap <Leader>s :GoSameIdsToggle<CR>
let g:go_play_open_browser = 0
'''

[[plugins]]  # go completion
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = 'go'
depends = ['deoplete.nvim']
hook_source = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''
# }

[[plugins]] # elixir
repo = 'elixir-editors/vim-elixir'
on_ft = ['elixir']

# haskell {
[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']
# }

# nim {
[[plugins]]
repo = 'zah/nim.vim'
on_ft = ['nim']
# }

# swift {
[[plugins]] # ハイライト
repo = 'keith/swift.vim'
on_ft = ['swift']

[[plugins]] # syntax
repo = 'kballard/vim-swift'
on_ft = ['swift']

[[plugins]] # 保管
repo = 'landaire/deoplete-swift'
on_ft = ['swift']
# }


# clojure {
[[plugins]]
repo = 'guns/vim-sexp'
on_ft = ['clojure']

[[plugins]]
repo = 'liquidz/vim-iced'
on_ft = ['clojure']
hook_source = '''
let g:iced_enable_default_key_mappings = v:true
'''
hook_add = '''
nmap Space<C-j> <Plug>(iced_def_jump)
nmap Space<C-b> <Plug>(iced_def_back)
nmap Space<C-c> :IcedCljsRepl (figwheel.main.api/repl-env "app")<CR>
'''
# }

# elm {
# npm install -g elm
# npm install -g elm-test
# npm install -g elm-oracle
# npm install -g elm-format
[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = ["elm"]
add_hook = '''
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:elm_syntastic_show_warnings = 1
'''

[[plugins]]
repo = 'pbogut/deoplete-elm'
on_ft = ['elm']
# }

# Ocaml {
# }

# HTML {
[[plugins]]
repo = "mattn/emmet-vim"
on_ft = ["html", "tpl"]
add_hook = '''
let g:user_emmet_leader_key='<C-y>'
'''

# }

# js {
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/yajs.vim'
on_ft =  ['javascript']

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'moll/vim-node'
on_ft = ['javascript']

[[plugins]]
repo = 'flowtype/vim-flow'
on_ft = ['javascript']
build = 'npm install -g flow-bin'
#}

# ruby {
[[plugins]] # end補完
repo = 'tpope/vim-endwise'
on_ft = ["ruby"]

[[plugins]] # local
repo = 'todesking/ruby_hl_lvar.vim'
on_ft = ["ruby"]

[[plugins]] # synatax
repo = 'marcus/rsense'
on_ft = ["ruby"]

# kotlin {
[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kotlin']
# }

# purescript {
[[plugins]]
repo = 'frigoeu/psc-ide-vim'
on_ft = ["purescript"]

[[plugins]]
repo = 'purescript-contrib/purescript-vim'
on_ft = ["purescript"]
# }

# typescript {
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ["typescript"]
add_hook = '''
let g:typescript_indent_disable = 1
'''

[[plugins]]
repo = 'Quramy/tsuquyomi'
on_ft = ["typescript"]
#}

# reason {
repo = 'reasonml-editor/vim-reason-plus'
on_ft = ['reason']
#}

[[plugins]] # toml
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]] # yaml
repo = 'chase/vim-ansible-yaml'
on_ft = ['yaml']

#カラースキーマ {
[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_post_source='''
set background=dark
colorscheme jellybeans "meta5 iceberg hybrid dracula
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'christophermca/meta5'

[[plugins]]
repo = 'dracula/vim'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'thinkpixellab/flatland'

[[plugins]]
repo = 'morhetz/gruvbox'
#}


